def dfs(x,y,n,maze):
    
    #방문하고자 하는 좌표를 스택에 넣어놓습니다
    #가장 먼저 (x,y)를 방문할 것이므로 (x,y)를 넣은 스택을 생성합니다
    
    stack = [(x,y)]
    
    #상하좌우 이동할 델타배열을 만들어냅니다
    
    x_move = [0,0,1,-1]
    y_move = [1,-1,0,0]
    
    while stack: #방문하고자 하는 좌표를 넣은 스택이 빌때까지 탐색을 수행합니다
        
        #스택에서 pop을 수행하여 방문하고자 하는 좌표를 뺍니다
        
        x,y = stack.pop()
        
        #방문하지 않았을때, 스택에 미리 들어가서 나중에 방문처리가 되어가지고 중복된 위치가 스택에 들어갈 수 있어서
        #아래 문장을 수행하지만 이 문제에서는 하지 않아도 상관없습니다
        if maze[y][x] == 1:
            continue
        
        #방문처리를 수행합니다
        #maze 값을 1로 만들었다는 것은 해당 위치로는 더 이상 이동하지 못한다는 뜻입니다
        maze[y][x] = 1
        
        #상하좌우 이동을 시작합니다
        for i in range(4):
            
            dx = x + x_move[i]
            dy = y + y_move[i]
            
            if dx >= 0 and dy >= 0 and dx <= n-1 and dy <= n-1: #이동한 좌표가 n*n배열 내에 들어간다면 이동이 가능합니다.
                
                if maze[dy][dx] == 0: #이동했을때 그 값이 0이라면 이동이 가능하다는 뜻이고
                    
                    stack.append((dx,dy)) #그러한 좌표를 스택에 넣어놓아서 나중에 방문하겠습니다
                
                elif maze[dy][dx] == 3: #만약에 이동했을때 값이 3이라면, 도착할 수 있다는 뜻이므로 바로 1을 return합니다
                    
                    return 1
    
    return 0 #모든 while문을 수행하더라도, return 1을 만나지 못한다면, 3에 도착하지 못한다는 뜻이므로 0을 return합니다.
                    
        
        
        
        
T = int(input())
# 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
for t in range(1, T + 1):
    # ///////////////////////////////////////////////////////////////////////////////////
    
    n = int(input())
    
    maze = [list(map(int,input())) for _ in range(n)]
    
    ##시작점을 먼저 찾습니다
    
    start = False

    for y in range(n):
        for x in range(n):
            
            if maze[y][x] == 2:
                start = True
                break
        
        if start:
            break
    
    print('#'+str(t),dfs(x,y,n,maze),sep=' ')
    
    
    
    # ///////////////////////////////////////////////////////////////////////////////////